// Code generated by MockGen. DO NOT EDIT.
// Source: gcs.go

// Package mock_gcs is a generated GoMock package.
package mock_gcs

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Put mocks base method
func (m *MockStorage) Put(ctx context.Context, objName string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, objName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockStorageMockRecorder) Put(ctx, objName, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockStorage)(nil).Put), ctx, objName, data)
}

// Get mocks base method
func (m *MockStorage) Get(ctx context.Context, objName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, objName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStorageMockRecorder) Get(ctx, objName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), ctx, objName)
}

// List mocks base method
func (m *MockStorage) List(ctx context.Context, filePrefix string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filePrefix)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockStorageMockRecorder) List(ctx, filePrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStorage)(nil).List), ctx, filePrefix)
}

// Delete mocks base method
func (m *MockStorage) Delete(ctx context.Context, objName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, objName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockStorageMockRecorder) Delete(ctx, objName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorage)(nil).Delete), ctx, objName)
}

// MakeObjectPublic mocks base method
func (m *MockStorage) MakeObjectPublic(ctx context.Context, objName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeObjectPublic", ctx, objName)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeObjectPublic indicates an expected call of MakeObjectPublic
func (mr *MockStorageMockRecorder) MakeObjectPublic(ctx, objName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeObjectPublic", reflect.TypeOf((*MockStorage)(nil).MakeObjectPublic), ctx, objName)
}
